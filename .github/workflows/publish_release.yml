name: Publish vectara-agentic Package

on:
  workflow_dispatch:

jobs:
  build-and-publish:
    name: Build and publish to PyPI
    if: github.repository == 'vectara/py-vectara-agentic'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Fetch all history for tagging

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'  # Specify the Python version you need

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine pytest flake8
        pip install -r requirements.txt

    - name: Set up PYTHONPATH
      run: echo "PYTHONPATH=$PYTHONPATH:$(pwd)" >> $GITHUB_ENV

    - name: Get version from _version.py
      id: get_version
      run: |
        # Extract version from vectara_agentic/_version.py using grep and sed
        VERSION=$(grep -o '__version__ = "[^"]*"' vectara_agentic/_version.py | sed 's/__version__ = "//;s/"//g')
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Build package
      run: |
        python setup.py sdist bdist_wheel

    - name: Check installation
      run: |
        pip install dist/*.whl

    - name: Lint the package
      run: |
        flake8 .

    - name: Publish package
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        twine upload dist/*

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.VERSION }}
        release_name: Release v${{ env.VERSION }}
        draft: false
        prerelease: false
        body: |
          Release v${{ env.VERSION }} of vectara-agentic
        
    - name: Install mkdocs and mike
      run: |
        pip install mkdocs mkdocs-material mkdocstrings mike

    - name: Configure Git user
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Update documentation
      run: |
        # Deploy the new version as both a specific version and as 'latest'
        mike delete latest --push || echo "No existing 'latest' version found, continuing..."
        mike deploy --push --update-aliases ${{ env.VERSION }} latest
        
        # Set the default version to 'latest'
        mike set-default --push latest
